#参考文档:http://logging.apache.org/log4j/2.x/manual/appenders.html
# -DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
#自定义插件的包.
packages=org.study.juli.examples.plugin
#log4j 日志的级别(自身).
stratus=error,info
#每隔30s重新读取一次log4j配置文件.
monitorInterval=30
#日志文件名.
property.filename=study-juli
#Console配置.
#输出到控制台,必须是Console.
appender.console.type=Console
#值任意.
appender.console.name=console
#日志输出.
appender.console.layout.type=PatternLayout
#日志匹配规则|ISO8601日期格式|[%-5p] 日志级别|[%-25c{1.}]类全路径|[%l][%F][%L][%M] 打印方法名,行号,文件名.
#${sys:nodeName} ${sys:localHost} ${sys:localPort} 获取JVM启动参数.
appender.console.layout.pattern=%d{yyyy-MM-dd'T'HH:mm:ss.SSSZZ} [%p] %logger %m %aj %n
#RollingFile配置.
#输出到文件,必须是RollingFile(如果配置的是RollingFile或RollingRandomAccessFile,则必须配置一个Policy).
appender.rolling.type=RollingRandomAccessFile
#异步使用.
appender.rolling.immediateFlush=false
#异步使用.
appender.rolling.append=false
#值任意.
appender.rolling.name=rolling
#日志文件路径.${sys:file.separator}系统的分隔符,${filename}日志文件名,全局配置(可以获取JVM系统参数).
appender.rolling.fileName=.${sys:file.separator}log${sys:file.separator}${filename}.log
#配置日志自定义插件
#日志输出(自定义的插件,将原始日志消息进行Json格式化输出).
appender.rolling.layout.type=ServerJsonLayout
#自定义的属性,可以在自定义的插件获取到这个值.
appender.rolling.layout.typeName=typeName
#配置日志文件Policies.
#Policy是用来控制日志文件何时(When)进行滚动的.
appender.rolling.policies.type=Policies
#压缩包
#注意filePattern中配置的文件重命名规则是%d{yyyy-MM-dd HH-mm-ss}-%i,最小的时间粒度是ss,即秒钟.-mm
appender.rolling.filePattern=.${sys:file.separator}log${sys:file.separator}${filename}-%d{yyyy-MM-dd HH}-%i.zip
#基于时间的触发策略,必须配合filePattern属性.
appender.rolling.policies.time.type=TimeBasedTriggeringPolicy
#interval默认的是1,%d{yyyy-MM-dd} 一天生成一个文件.
#interval默认的是1,%d{yyyy-MM-dd HH} 一小时生成一个文件.
#interval默认的是1,%d{yyyy-MM-dd HH-mm} 一分钟生成一个文件.
appender.rolling.policies.time.interval=1
#modulate:boolean型,说明是否对压缩时间进行调制.若modulate=true,则压缩时间将以0点为边界进行偏移计算.
# 例子:modulate=true,interval=4hours
# 假设上次打包日志的时间为03:00,则下次打包日志的时间为04:00(因为最近满足的一个时间)
# 之后的打包时间依次为08:00,12:00,16:00......
appender.rolling.policies.time.modulate=false
#基于日志文件大小的触发策略.
#单位有:KB,MB,GB
appender.rolling.policies.size.type=SizeBasedTriggeringPolicy
#单个日志文件大小.
appender.rolling.policies.size.size=1000MB
#配置日志文件Strategy.
#Strategy是用来控制日志文件如何(How)进行滚动的.
appender.rolling.strategy.type=DefaultRolloverStrategy
#一个interval最大产生几个文件.
appender.rolling.strategy.max=3
appender.rolling.strategy.min=1
#压缩级别(0-9)
#0 不压缩
#1 最快压缩
#其他看参考文档
appender.rolling.strategy.compressionLevel=1
#以下配置还需要严格的测试.
#从2.8版开始.
# 条件1:如果fileIndex属性设置为nomax.
# 最小值appender.rolling.strategy.min
# 最大值appender.rolling.strategy.max将被忽略.
# 文件编号将以1递增,并且每次滚动都将有一个递增,而没有最大文件数.
# 这样的话会消耗大量的磁盘,但是日志不会丢失.
#
# 条件2:如果fileIndex属性设置为一个数字,则代表最大文件数量在最小值和最大值之间.
# 这样的话,很可能因为日志非常多,导致丢失大量的数据.
appender.rolling.strategy.fileIndex=nomax
#将配置的Handler处理器交给rootLogger注册.
rootLogger.level=info
rootLogger.appenderRef.console.ref=console
rootLogger.appenderRef.rolling.ref=rolling
#除此之外还有大量的配置.
#比如删除策略.
#目录扫描策略.
