<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://maven.apache.org/POM/4.0.0"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <artifactId>study-dist</artifactId>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <!-- 2.是否追加<id>作为文件名后缀.-->
              <appendAssemblyId>false</appendAssemblyId>
              <!-- 3.必须设置成false解决一些错误信息.-->
              <attach>false</attach>
              <!--内置打包描述符,http://maven.apache.org/components/plugins/maven-assembly-plugin/descriptor-refs.html-->
              <descriptorRefs>
                <!--只打包target下的jar和docs,根目录下的README.md,LICENSE.txt,NOTICE-->
                <!--<descriptorRef>bin</descriptorRef>-->
                <!--只打包所有的jar,到一个fat jar中.-->
                <!--<descriptorRef>jar-with-dependencies</descriptorRef>-->
                <!--只打包根目录下的README.md,LICENSE.txt,NOTICE,src,pom.xml-->
                <!--<descriptorRef>src</descriptorRef>-->
                <!--只打包根本目下的所有,不包括*.log和target目录.-->
                <!--<descriptorRef>project</descriptorRef>-->
              </descriptorRefs>
              <!-- 4.自定义打包描述符.-->
              <descriptors>
                <!-- 5.zip打包描述符.-->
                <descriptor>${project.basedir}/src/main/assemblies/zip-bin.xml</descriptor>
                <!-- 6.dir打包描述符.-->
                <descriptor>${project.basedir}/src/main/assemblies/dir-bin.xml</descriptor>
                <!-- 7.jar打包描述符.-->
                <descriptor>${project.basedir}/src/main/assemblies/jar-bin.xml</descriptor>
                <!-- 8.war打包描述符.-->
                <descriptor>${project.basedir}/src/main/assemblies/war-bin.xml</descriptor>
              </descriptors>
              <!-- 9.打包的目录名,或者打包的文件名.-->
              <finalName>study-${project.version}-bin</finalName>
              <!-- 10.打包后存储的路径.-->
              <outputDirectory>${project.build.directory}/releases/</outputDirectory>
            </configuration>
            <!-- 11.与maven package绑定,在执行mvn package时执行.-->
            <goals>
              <!-- 12.执行动作.-->
              <goal>single</goal>
            </goals>
            <!-- 1.名字是任意的有意义的即可.-->
            <id>bin</id>
            <phase>package</phase>
          </execution>
        </executions>
        <groupId>org.apache.maven.plugins</groupId>
        <version>3.3.0</version>
      </plugin>
      <plugin>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <!-- 排除父pom中的代码样式检查插件,有的插件不支持,需要查看插件skip参数 . -->
          <skip>true</skip>
        </configuration>
        <groupId>org.apache.maven.plugins</groupId>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <artifactId>disruptor</artifactId>
      <groupId>com.lmax</groupId>
      <version>3.4.2</version>
    </dependency>
    <dependency>
      <artifactId>log4j-core</artifactId>
      <groupId>org.apache.logging.log4j</groupId>
      <!--  2.9.1有不少问题,所以选择2.13.0-->
      <!--  1:Required filename-based automodules detected-->
      <!--  2:代码中偶尔读取不到自定义插件-->
      <!--  3:日志格式输出的更好-->
      <scope>compile</scope>
      <version>2.13.3</version>
    </dependency>
  </dependencies>
  <modelVersion>4.0.0</modelVersion>
  <!-- 打包时需要哪些依赖的jar(配合 dependencySets).-->
  <!-- 这个包主要是为了测试dependencySets打包使用.-->
  <packaging>pom</packaging>
  <!-- archive-tmp空目录问题: https://issues.apache.org/jira/browse/MASSEMBLY-260 -->
  <!-- 现在还不知道为什么会留下一个空目录.这个目录具体是干什么的,也没有资料.-->
  <parent>
    <artifactId>study</artifactId>
    <groupId>org.study</groupId>
    <version>2020</version>
  </parent>
</project>