<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://maven.apache.org/POM/4.0.0"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.study</groupId>
  <artifactId>study</artifactId>
  <version>2020</version>
  <packaging>pom</packaging>
  <modules>
    <module>study-juli</module>
    <module>study-agent</module>
    <module>study-examples</module>
    <module>study-doc</module>
    <module>study-cli</module>
    <module>study-dist</module>
  </modules>
  <properties>
    <!--  1:统一字符集编码UTF-8 -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!-- 默认直接读取系统参数配置的jdk版本. -->
    <!--
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
    <maven.compiler.compilerVersion>11</maven.compiler.compilerVersion>
    -->
  </properties>
  <dependencyManagement>
    <!--  1:统一管理依赖版本 -->
  </dependencyManagement>
  <build>
    <pluginManagement>
      <!--  1:统一管理插件版本 -->
    </pluginManagement>
    <plugins>
      <plugin>
        <!-- Resources插件处理将项目资源复制到输出目录的问题-->
        <artifactId>maven-resources-plugin</artifactId>
        <groupId>org.apache.maven.plugins</groupId>
        <version>3.2.0</version>
      </plugin>
      <plugin>
        <!-- 编译-->
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <!--  1:使用jdk11进行编译,直接使用系统参数-->
          <encoding>UTF-8</encoding>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <compilerVersion>${java.version}</compilerVersion>
          <!-- 如果我们的代码想要访问JDK模块化的代码,可以使用下面的选项.-->
          <!-- ALL-UNNAMED未命名的意思是开放给所有的包访问,如果想固定给某个包的话,填写对应的包名即可.-->
          <compilerArgs>
            <arg>--add-exports=java.base/jdk.internal.loader=ALL-UNNAMED</arg>
            <arg>--add-exports=java.base/jdk.internal.logger=ALL-UNNAMED</arg>
            <arg>--add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED</arg>
            <arg>--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED</arg>
            <arg>--add-exports=java.base/sun.util.logging=ALL-UNNAMED</arg>
            <arg>--add-exports=java.base/sun.util.logging=ALL-UNNAMED</arg>
          </compilerArgs>
        </configuration>
        <groupId>org.apache.maven.plugins</groupId>
        <version>3.8.1</version>
      </plugin>
      <plugin>
        <!-- 打包-->
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <!--  1:打jar包排除静态的文件,不需要-->
          <archive>
            <!-- 1:排除Maven自己的描述文件,true放两个文件,false不放这两个文件 -->
            <!-- 2: server4-server-1.0.jar/META-INF/maven/org.server/server4-server/ -->
            <!-- 3:pom.properties-->
            <!-- #Generated by Maven
                 #Sun Aug 23 14:31:44 CST 2020
                  groupId=org.server
                  artifactId=server4-server
                  version=1.0
             -->
            <!-- 项目的pom.xml-->
            <!-- 但是不影响 src/resources/METE-INF下面的资源文件-->
            <!-- 所谓META-INF, 说白了就是存放一些meta information相关的文件的这么一个文件夹-->
            <addMavenDescriptor>false</addMavenDescriptor>
          </archive>
          <excludes>
            <exclude>log4j2.properties</exclude>
            <exclude>server.properties</exclude>
          </excludes>
        </configuration>
        <!-- https://maven.apache.org/plugins/maven-jar-plugin/examples/include-exclude.html-->
        <groupId>org.apache.maven.plugins</groupId>
        <version>3.2.0</version>
      </plugin>
      <plugin>
        <!-- 测试-->
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
        <!-- 编译跳过测试用例 mvn install -DskipTests 或者 mvn install -Dmaven.test.skip=true-->
        <!-- 参考 http://maven.apache.org/surefire/maven-surefire-plugin/examples/skipping-test.html-->
        <groupId>org.apache.maven.plugins</groupId>
        <version>2.22.2</version>
      </plugin>
      <plugin>
        <!-- 代码样式检测-->
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <!-- core配置文件-->
          <configLocation>checkstyle.xml</configLocation>
          <!-- -->
          <failOnViolation>true</failOnViolation>
          <!-- 是否对test目录中的代码进行检查-->
          <includeTestSourceDirectory>false</includeTestSourceDirectory>
          <!-- 解决这个问题: Unable to locate Source XRef to link to - DISABLED. -->
          <linkXRef>false</linkXRef>
          <!-- 检测结果输出到控制台-->
          <logViolationsToConsole>true</logViolationsToConsole>
          <!-- -->
          <suppressionsLocation>suppressions.xml</suppressionsLocation>
        </configuration>
        <executions>
          <execution>
            <goals>
              <!-- 执行哪些步骤-->
              <!-- 只检测,并统计总的问题数量,不会停止编译打包. -->
              <!-- check 会停止编译打包. -->
              <goal>checkstyle</goal>
            </goals>
            <!-- 随便一个名字-->
            <id>validate</id>
            <!-- 与maven的生命周期的某个阶段绑定,与maven验证阶段一起执行代码样式检查. -->
            <phase>validate</phase>
          </execution>
        </executions>
        <groupId>org.apache.maven.plugins</groupId>
        <version>3.1.0</version>
      </plugin>
    </plugins>
  </build>
</project>